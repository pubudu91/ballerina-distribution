 /*
  ~ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~ *
  ~ * Licensed under the Apache License, Version 2.0 (the "License");
  ~ * you may not use this file except in compliance with the License.
  ~ * You may obtain a copy of the License at
  ~ *
  ~ * http://www.apache.org/licenses/LICENSE-2.0
  ~ *
  ~ * Unless required by applicable law or agreed to in writing, software
  ~ * distributed under the License is distributed on an "AS IS" BASIS,
  ~ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ * See the License for the specific language governing permissions and
  ~ * limitations under the License.
  ~ */

import org.apache.tools.ant.filters.*
import org.apache.tools.ant.taskdefs.condition.Os
import groovy.json.JsonSlurper

description = 'Ballerina - Tools'

ext {
    jreLocation="build/target/ballerina-jre-artifacts-zip/ballerina-jre-artifacts-${ballerinaJreArtifactsVersion}"
    distributionName="ballerina"
}

configurations {
    jBallerinaDistribution
    ballerinaDistribution
    ballerinaLinuxDistribution
    ballerinaMacDistribution
    ballerinaWindowsDistribution
}

def jBallerinaDistributionZip = file("$project.buildDir/distributions/ballerina-${shortVersion}.zip")
def ballerinaDistributionZip = file("$project.buildDir/distributions/ballerina-${ballerinaVersion}.zip")
def ballerinaLinuxDistributionZip = file("$project.buildDir/distributions/ballerina-linux-${ballerinaVersion}.zip")
def ballerinaMacDistributionZip = file("$project.buildDir/distributions/ballerina-macos-${ballerinaVersion}.zip")
def ballerinaWindowsDistributionZip = file("$project.buildDir/distributions/ballerina-windows-${ballerinaVersion}.zip")

// Read StdLib config JSON
def stdLibInputFile = new File("${project.rootDir}/ballerina/resources/stdlib-configs.json")
def stdLibConfigs = new JsonSlurper().parseText(stdLibInputFile.text)

task unpackBallerinaJre(type: Copy) {
    group = "unpack_dependencies"
    configurations.ballerinaJre.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            from zipTree(artifact.getFile())
            into new File("${buildDir}/target", artifact.name+"-zip")
    }
}

task unpackJballerinaTools(type: Copy) {
    group = "unpack_dependencies"
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            from zipTree(artifact.getFile())
            into new File("${buildDir}/target/extracted-distributions", artifact.name+"-zip")
    }
}

task unpackAwsLambdaBalo(type: Copy) {
    group = "unpack_dependencies"
    configurations.awsLambdaBalo.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            from zipTree(artifact.getFile())
            into new File("${buildDir}/target/extracted-distributions", artifact.name+"-zip")
    }
}

task unpackAwsLambdaExamples(type: Copy) {
    group = "unpack_dependencies"
    configurations.awsLambdaExamples.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            from zipTree(artifact.getFile())
            into new File("${buildDir}/target/extracted-distributions", artifact.name+"-zip")
    }
}

task unpackDockerAnnotations(type: Copy) {
    group = "unpack_dependencies"
    configurations.dockerAnnotations.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            from zipTree(artifact.getFile())
            into new File("${buildDir}/target/extracted-distributions", artifact.name+"-zip")
    }
}

task unpackDockerExamples(type: Copy) {
    group = "unpack_dependencies"
    configurations.dockerExamples.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            from zipTree(artifact.getFile())
            into new File("${buildDir}/target/extracted-distributions", artifact.name+"-zip")
    }
}

task unpackKubernetesAnnotations(type: Copy) {
    group = "unpack_dependencies"
    configurations.kubernetesAnnotations.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            from zipTree(artifact.getFile())
            into new File("${buildDir}/target/extracted-distributions", artifact.name+"-zip")
    }
}

task unpackKubernetesExamples(type: Copy) {
    group = "unpack_dependencies"
    configurations.kubernetesExamples.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            from zipTree(artifact.getFile())
            into new File("${buildDir}/target/extracted-distributions", artifact.name+"-zip")
    }
}

task unpackStdLibs(type: Copy) {
    group = "unpack_dependencies"
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", artifact.name+"-zip")
    }
}

task unpackBalCommand(type: Copy) {
    group = "unpack_dependencies"
    configurations.balCommand.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            from zipTree(artifact.getFile())
            into new File("${buildDir}/target/extracted-distributions", artifact.name+"-zip")
    }
}

task extractJreForLinux(type: Copy) {
    group = "extract_jre"
    from zipTree{"${jreLocation}/jre-1.8-linux.zip"}
    into("${buildDir}/target/extracted-jre-linux") 
}

task extractJreForMac(type: Copy) {
    group = "extract_jre"
    from zipTree{"${jreLocation}/jre-1.8-macos.zip"}
    into("${buildDir}/target/extracted-jre-macos") 
}

task extractJreForWindows(type: Copy) {
    group = "extract_jre"
    from zipTree{"${jreLocation}/jre-1.8-windows.zip"}
    into("${buildDir}/target/extracted-jre-windows") 
}

task deleteTemporaryFiles(type: Delete) {
    delete 'build/target'
}

task copyOtherRepos(type: Copy) {
    def ballerinaDist = "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaVersion}"
    into ballerinaDist

    into("docs/docker") {
        from "build/target/extracted-distributions/docker-extension-annotations-zip/docs/docker"
    }
    /* Standard Libraries */
    stdLibConfigs.each { stdLibConfig ->
        def birCacheSourceDir = stdLibConfig.cache.bir.sourceDir
        def birCacheTargetDir = stdLibConfig.cache.bir.targetDir
        def baloCacheSourceDir = stdLibConfig.cache.balo.sourceDir
        def baloCacheTargetDir = stdLibConfig.cache.balo.targetDir
        def jarCacheSourceDir = stdLibConfig.cache.jar.sourceDir
        def jarCacheTargetDir = stdLibConfig.cache.jar.targetDir
        def breLibSourcePath = stdLibConfig.breLibSourcePath
        def apiDocsPath = stdLibConfig.apiDocsPath

        into("bir-cache/${birCacheTargetDir}") {
            from "build/target/extracted-distributions/${birCacheSourceDir}"
        }
        into("bre/lib") {
            from "build/target/extracted-distributions/${breLibSourcePath}"
        }
        into("docs") {
            from "build/target/extracted-distributions/${apiDocsPath}"
        }
        // pack to new cache
        into("cache/bir/${birCacheTargetDir}") {
            from "build/target/extracted-distributions/${birCacheSourceDir}"
        }
        into("cache/balo/${baloCacheTargetDir}") {
            from "build/target/extracted-distributions/${baloCacheSourceDir}"
        }
        into("cache/jar/${jarCacheTargetDir}") {
            from "build/target/extracted-distributions/${jarCacheSourceDir}"
        }
    }
}

task combineDocs(type: Exec) {
    workingDir "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaVersion}/docs"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', "$project.buildDir/target/extracted-distributions/jballerina-tools-zip/" +
                "jballerina-tools-${ballerinaVersion}/bin/ballerina.bat", "doc", "--combine"
    } else {
        commandLine "$project.buildDir/target/extracted-distributions/jballerina-tools-zip/" +
                "jballerina-tools-${ballerinaVersion}/bin/ballerina", "doc", "--combine"
    }
}

task packageDist(type: Zip) {
    group = "package_distribution"
    description = 'Ballerina Tools Distribution Assembly'
    baseName = "${distributionName}"
    ext{parentDir="${baseName}-${shortVersion}"}
    archiveFileName="${baseName}-${shortVersion}.zip"
    entryCompression=ZipEntryCompression.STORED

    into("${parentDir}") {
        from "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaVersion}"
    }
    into("${parentDir}/examples") {
        from "${project.rootDir}/examples/"
        exclude "all-bbes.json"
        fileMode = 0755
    }
    into("${parentDir}/examples") {
        from "build/target/extracted-distributions/awslambda-extension-examples-zip"
        exclude "index.js"
    }
    into("${parentDir}/examples") {
        from "build/target/extracted-distributions/docker-extension-examples-zip"
        exclude "index.js"
    }
    into("${parentDir}/examples") {
        from "build/target/extracted-distributions/kubernetes-extension-examples-zip"
        exclude "index.js"
    }
    into("${parentDir}/bir-cache/ballerina/docker") {
        from "build/target/extracted-distributions/docker-extension-annotations-zip/docker"
    }
    into("${parentDir}/bir-cache/ballerina/kubernetes") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/kubernetes"
    }
    into("${parentDir}/bir-cache/ballerina/istio") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/istio"
    }
    into("${parentDir}/bir-cache/ballerina/openshift") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/openshift"
    }
    into("${parentDir}/bir-cache/ballerina/knative") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/knative"
    }
    into("${parentDir}/bir-cache/ballerinax/awslambda") {
        from "build/target/extracted-distributions/awslambda-extension-balo-zip/awslambda"
    }

    /* Files */
    into("${parentDir}/lib/") {
        from "lib/version.txt"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [version: version])
    }
    into("${parentDir}/bre/lib") {
        from "build/target/extracted-distributions/awslambda-extension-balo-zip/ballerinax.awslambda.jar"
        fileMode = 0644
    }
    into("${parentDir}/bre/lib") {
        from "build/target/extracted-distributions/docker-extension-annotations-zip/ballerina.docker.jar"
        fileMode = 0644
    }
    into("${parentDir}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.kubernetes.jar"
        fileMode = 0644
    }
    into("${parentDir}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.istio.jar"
        fileMode = 0644
    }
    into("${parentDir}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.openshift.jar"
        fileMode = 0644
    }
    into("${parentDir}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.knative.jar"
        fileMode = 0644
    }

    /* Dependencies */
    into("${parentDir}/bre/lib"){
        from configurations.exten
    }

    doLast{
        println 'Ballerina Tools Distribution Packaged'
    }

    outputs.file jBallerinaDistributionZip
}

task packageDistZip(type: Zip) {
    group = "package_distribution"
    description = 'Ballerina Distribution Assembly'
    baseName = "${distributionName}"
    ext{parentDir="${baseName}-${version}"}
    entryCompression=ZipEntryCompression.STORED

    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/examples/") {
        from "${project.rootDir}/examples/"
        exclude "all-bbes.json"
        fileMode = 0755
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/examples") {
        from "build/target/extracted-distributions/awslambda-extension-examples-zip"
        exclude "index.js"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/examples") {
        from "build/target/extracted-distributions/docker-extension-examples-zip"
        exclude "index.js"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/examples") {
        from "build/target/extracted-distributions/kubernetes-extension-examples-zip"
        exclude "index.js"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/docker") {
        from "build/target/extracted-distributions/docker-extension-annotations-zip/docker"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/kubernetes") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/kubernetes"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/istio") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/istio"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/openshift") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/openshift"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/knative") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/knative"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerinax/awslambda") {
        from "build/target/extracted-distributions/awslambda-extension-balo-zip/awslambda"
    }

    /* Tools artifacts */
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}") {
        from "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaVersion}"
        exclude "distributions/ballerina-version"
        exclude "/bin/version.txt"

    }
    into("${parentDir}") {
        from "../resources/tools"
        exclude "distributions/ballerina-version"
        filter(ReplaceTokens, tokens: [ballerinaCommandVersion: ballerinaCommandVersion])
    }

    /* Files */
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bin") {
        from "lib/version.txt"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [version: ballerinaVersion])
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/awslambda-extension-balo-zip/ballerinax.awslambda.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/docker-extension-annotations-zip/ballerina.docker.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.kubernetes.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.istio.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.openshift.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.knative.jar"
        fileMode = 0644
    }

    into("${parentDir}/distributions") {
        from "../resources/tools/distributions/ballerina-version"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [version: ballerinaVersion])
    }
    into("${parentDir}/bin") {
        from "build/target/extracted-distributions/ballerina-command-distribution-zip/bin/ballerina"
        fileMode = 775
        filter(ReplaceTokens, tokens: [ballerinaCommandVersion: ballerinaCommandVersion])
    }
    into("${parentDir}/bin") {
        from "build/target/extracted-distributions/ballerina-command-distribution-zip/bin/ballerina.bat"
        fileMode = 0775
        filter(ReplaceTokens, tokens: [ballerinaCommandVersion: ballerinaCommandVersion])
    }
    into("${parentDir}/lib") {
        from "build/target/extracted-distributions/ballerina-command-distribution-zip/lib/ballerina-command-${ballerinaCommandVersion}.jar"
        fileMode = 0775
    }

    /* Dependencies */
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib"){
        from configurations.exten
    }

    doLast{
        println 'Ballerina Distribution Packaged'
    }

    outputs.file ballerinaDistributionZip
}

task packageDistLinux(type: Zip) {
    group = "package_distribution"
    description = 'Ballerina Linux Distribution Assembly'
    baseName = "${distributionName}-linux"
    ext{parentDir="${baseName}-${version}"}
    entryCompression=ZipEntryCompression.STORED
    
    into("${parentDir}/dependencies") {
        from "build/target/extracted-jre-linux"
        fileMode = 0755
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/examples/") {
        from "${project.rootDir}/examples/"
        exclude "all-bbes.json"
        fileMode = 0755
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/examples") {
        from "build/target/extracted-distributions/awslambda-extension-examples-zip"
        exclude "index.js"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/examples") {
        from "build/target/extracted-distributions/docker-extension-examples-zip"
        exclude "index.js"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/examples") {
        from "build/target/extracted-distributions/kubernetes-extension-examples-zip"
        exclude "index.js"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/docker") {
        from "build/target/extracted-distributions/docker-extension-annotations-zip/docker"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/kubernetes") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/kubernetes"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/istio") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/istio"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/openshift") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/openshift"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/knative") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/knative"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerinax/awslambda") {
        from "build/target/extracted-distributions/awslambda-extension-balo-zip/awslambda"
    }

    /* Tools artifacts */
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}") {
        from "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaVersion}"
        exclude "distributions/ballerina-version"
        exclude "/bin/ballerina.bat"
        exclude "/bin/version.txt"
    }
    into("${parentDir}") {
        from "../resources/tools"
        exclude "distributions/ballerina-version"
        exclude "**/scripts/**"
    }

    /* Files */
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bin") {
        from "lib/version.txt"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [version: version])
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/awslambda-extension-balo-zip/ballerinax.awslambda.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/docker-extension-annotations-zip/ballerina.docker.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.kubernetes.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.istio.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.openshift.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.knative.jar"
        fileMode = 0644
    }

    into("${parentDir}/distributions") {
        from "../resources/tools/distributions/ballerina-version"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [version: ballerinaVersion])
    }
    into("${parentDir}/bin") {
        from "build/target/extracted-distributions/ballerina-command-distribution-zip/bin/ballerina"
        fileMode = 775
        filter(ReplaceTokens, tokens: [ballerinaCommandVersion: ballerinaCommandVersion])
    }
    into("${parentDir}/lib") {
        from "build/target/extracted-distributions/ballerina-command-distribution-zip/lib/ballerina-command-${ballerinaCommandVersion}.jar"
        fileMode = 0775
    }

    /* Dependencies */
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib"){
        from configurations.exten
    }

    doLast{
        println 'Ballerina Linux Distribution Packaged'
    }

    outputs.file ballerinaLinuxDistributionZip
}

task packageDistMac(type: Zip) {
    group = "package_distribution"
    description = 'Ballerina MacOS Distribution Assembly'
    baseName = "${distributionName}-macos"
    ext{parentDir="${baseName}-${version}"}
    entryCompression=ZipEntryCompression.STORED

    into("${parentDir}/dependencies") {
        from "build/target/extracted-jre-macos"
        fileMode = 0755
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/examples/") {
        from "${project.rootDir}/examples/"
        exclude "all-bbes.json"
        fileMode = 0755
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/examples") {
        from "build/target/extracted-distributions/awslambda-extension-examples-zip"
        exclude "index.js"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/examples") {
        from "build/target/extracted-distributions/docker-extension-examples-zip"
        exclude "index.js"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/examples") {
        from "build/target/extracted-distributions/kubernetes-extension-examples-zip"
        exclude "index.js"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/docker") {
        from "build/target/extracted-distributions/docker-extension-annotations-zip/docker"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/kubernetes") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/kubernetes"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/istio") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/istio"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/openshift") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/openshift"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/knative") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/knative"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerinax/awslambda") {
        from "build/target/extracted-distributions/awslambda-extension-balo-zip/awslambda"
    }

    /* Tools artifacts */
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}") {
        from "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaVersion}"
        exclude "distributions/ballerina-version"
        exclude "/bin/ballerina.bat"
        exclude "/bin/version.txt"
    }

    /* Files */
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bin") {
        from "lib/version.txt"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [version: version])
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/awslambda-extension-balo-zip/ballerinax.awslambda.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/docker-extension-annotations-zip/ballerina.docker.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.kubernetes.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.istio.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.openshift.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.knative.jar"
        fileMode = 0644
    }

    into("${parentDir}/distributions") {
        from "../resources/tools/distributions/ballerina-version"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [version: ballerinaVersion])
    }
    into("${parentDir}/bin") {
        from "build/target/extracted-distributions/ballerina-command-distribution-zip/bin/ballerina"
        fileMode = 775
        filter(ReplaceTokens, tokens: [ballerinaCommandVersion: ballerinaCommandVersion])
    }
    into("${parentDir}/lib") {
        from "build/target/extracted-distributions/ballerina-command-distribution-zip/lib/ballerina-command-${ballerinaCommandVersion}.jar"
        fileMode = 0775
    }

    /* Dependencies */
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib"){
        from configurations.exten
    }

    doLast{
        println 'Ballerina MacOS Distribution Packaged'
    }

    outputs.file ballerinaMacDistributionZip
}

task packageDistWindows(type: Zip) {
    group = "package_distribution"
    description = 'Ballerina Windows Distribution Assembly'
    baseName = "${distributionName}-windows"
    ext{parentDir="${baseName}-${version}"}
    entryCompression=ZipEntryCompression.STORED

    into("${parentDir}/dependencies") {
        from "build/target/extracted-jre-windows"
        fileMode = 0755
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/examples/") {
        from "${project.rootDir}/examples/"
        exclude "all-bbes.json"
        fileMode = 0755
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/examples") {
        from "build/target/extracted-distributions/awslambda-extension-examples-zip"
        exclude "index.js"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/examples") {
        from "build/target/extracted-distributions/docker-extension-examples-zip"
        exclude "index.js"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/examples") {
        from "build/target/extracted-distributions/kubernetes-extension-examples-zip"
        exclude "index.js"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/docker") {
        from "build/target/extracted-distributions/docker-extension-annotations-zip/docker"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/kubernetes") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/kubernetes"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/istio") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/istio"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/openshift") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/openshift"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerina/knative") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/knative"
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bir-cache/ballerinax/awslambda") {
        from "build/target/extracted-distributions/awslambda-extension-balo-zip/awslambda"
    }

    /* Tools artifacts */
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}") {
        from "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaVersion}"
        exclude "distributions/ballerina-version"
        exclude "/bin/ballerina"
        exclude "/bin/version.txt"
    }

    /* Files */
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bin") {
        from "lib/version.txt"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [version: version])
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/awslambda-extension-balo-zip/ballerinax.awslambda.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/docker-extension-annotations-zip/ballerina.docker.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.kubernetes.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.istio.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.openshift.jar"
        fileMode = 0644
    }
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib") {
        from "build/target/extracted-distributions/kubernetes-extension-annotations-zip/ballerina.knative.jar"
        fileMode = 0644
    }

    into("${parentDir}/distributions") {
        from "../resources/tools/distributions/ballerina-version"
        fileMode = 0644
        filter(ReplaceTokens, tokens: [version: ballerinaVersion])
    }
    into("${parentDir}/bin") {
        from "build/target/extracted-distributions/ballerina-command-distribution-zip/bin/ballerina.bat"
        fileMode = 775
        filter(ReplaceTokens, tokens: [ballerinaCommandVersion: ballerinaCommandVersion])
    }
    into("${parentDir}/lib") {
        from "build/target/extracted-distributions/ballerina-command-distribution-zip/lib/ballerina-command-${ballerinaCommandVersion}.jar"
        fileMode = 0775
    }

    /* Dependencies */
    into("${parentDir}/distributions/jballerina-${ballerinaVersion}/bre/lib"){
        from configurations.exten
    }

    doLast{
        println 'Ballerina Windows Distribution Packaged'
    }

    outputs.file ballerinaWindowsDistributionZip
}

artifacts {
    jBallerinaDistribution file: jBallerinaDistributionZip, builtBy: packageDist
    ballerinaDistribution file: ballerinaDistributionZip, builtBy: packageDistZip
    ballerinaLinuxDistribution file: ballerinaLinuxDistributionZip, builtBy: packageDistLinux
    ballerinaMacDistribution file: ballerinaMacDistributionZip, builtBy: packageDistMac
    ballerinaWindowsDistribution file: ballerinaWindowsDistributionZip, builtBy: packageDistWindows
}

task testExamples() {

    def jballerinaPack = "${project.rootDir}/ballerina/build/target/extracted-distributions/jballerina-tools-zip"
    def baseBuildPath = "${project.rootDir}/ballerina/build/bbe-pack"
    def distPath = "${baseBuildPath}/jballerina-tools-${ballerinaVersion}"
    def bbeList = []

    PatternSet patternSet = new PatternSet();
    patternSet.exclude("**/.ballerina/**");
    patternSet.exclude("**/Ballerina.toml");
    patternSet.exclude("**/Ballerina.lock");
    patternSet.exclude("**/ballerina-internal.log")
    inputs.files(files("${distPath}/examples").asFileTree.matching(patternSet))
    def ignoreList = [
         'proto-to-ballerina',
         'swagger-to-ballerina',
         'taint-checking',
         'websub-hub-client-sample',
         'websub-remote-hub-sample',
         'config-api',
         'testerina-function-mocks',
         'jdbc-client-crud-operations',
         'jdbc-client-batch-update',
         'jdbc-client-call-procedures',
         'streaming-big-dataset',
         'docker-deployment',
         'kubernetes-deployment',
         'knative-deployment',
         'awslambda-deployment',
         'openshift-deployment',
         'grpc-server-streaming',
         'transactions-distributed',
         'local-transactions',
         'local-transactions-with-participants',
         'xa-transactions',
         'secured-client-with-oauth2',
         'gauge-metrics',
         'counter-metrics',
         'openapi-to-ballerina',
         'kafka_message_consumer_group_service',
         'kafka_message_consumer_simple',
         'kafka_message_consumer_service',
         'kafka_message_producer',
         'kafka_message_producer_transactional',
         'grpc-secured-unary',
         'grpc-bidirectional-streaming',
         'grpc-client-streaming',
         'grpc-unary-non-blocking',
         'grpc-unary-blocking',
         'testerina-guarantee-test-execution-order',
         'testerina-data-driven-tests',
         'testerina-before-and-after-suite',
         'testerina-before-each-test',
         'testerina-before-and-after-test',
         'testerina-assertions',
         'taint-checking',
         'secured-service-with-basic-auth',
         'secured-service-with-jwt-auth',
         'secured-client-with-basic-auth',
         'secured-client-with-jwt-auth',
         'http-caching-client',
         'http-data-binding',
         'http-1.1-to-2.0-protocol-switch',
         'http-to-websocket-upgrade',
         'basic-https-listener-client',
         'https-listener',
         'http-client-endpoint',
         'response-with-multiparts',
         'tracing',
         'log-api',
         'the-main-function',
         'time',
         'crypto',
         'xml-functions',
         'xml-access',
         'header-based-routing',
         'mutual-ssl',
         'tuple-match-statement',
         'type-conversion',
         'filepath',
         'record-io',
         'csv-io',
         'type-cast',
         'async',
         'json-csv',
         'worker-interaction',
         'fork-variable-access',
         'functional-iteration',
         'table',
         'maps',
         'cache',
         'send-and-receive-emails',
         'xml-attributes',
         'xml-literal',
         'xml',
         'json-to-xml-conversion',
         'length',
         'foreach',
         'testerina-group-tests',
         'json-record-map-conversion'
    ]
    doFirst {
        copy {
            from jballerinaPack
            into baseBuildPath
        }
        exec {
            //Initialize Ballerina project
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                //TODO: Need to verify with windows
                workingDir "${baseBuildPath}"
                commandLine 'cmd', '/c', "jballerina-tools-${ballerinaVersion}/bin/ballerina.bat", 'new', 'TestProject'
            } else {
                workingDir "${baseBuildPath}"
                commandLine 'sh', '-c', "jballerina-tools-${ballerinaVersion}/bin/ballerina new TestProject"
            }
        }

        def tomlFile = new File("${baseBuildPath}/TestProject/Ballerina.toml")
        def src = "${project.rootDir}/examples/"
        def dis = "${baseBuildPath}/TestProject/src/"
        copy {
            from(src)
            into dis
        }
        def inputFile = new File("${baseBuildPath}/TestProject/src/all-bbes.json")
        def categories = new JsonSlurper().parseText(inputFile.text)
        categories.each { category ->
            def examples = category.samples
            examples.each { example ->
                def folder = new File("${baseBuildPath}/TestProject/src/${example.url}")
                if (folder.exists()) {
                    bbeList.push("$example.url")
                }
            }
        }
    }
    doLast {
        def birCache = new File("${distPath}/cache/bir/")
        def baloCache = new File("${distPath}/cache/balo/")
        def jarCache = new File("${distPath}/cache/jar/")
        stdLibConfigs.each { stdLibConfig ->
            def birCacheSourceDir = stdLibConfig.cache.bir.sourceDir
            def birCacheTargetDir = stdLibConfig.cache.bir.targetDir
            def baloCacheSourceDir = stdLibConfig.cache.balo.sourceDir
            def baloCacheTargetDir = stdLibConfig.cache.balo.targetDir
            def jarCacheSourceDir = stdLibConfig.cache.jar.sourceDir
            def jarCacheTargetDir = stdLibConfig.cache.jar.targetDir
            def breLibSourcePath = stdLibConfig.breLibSourcePath
            def apiDocsPath = stdLibConfig.apiDocsPath
            copy {
                from "build/target/extracted-distributions/${birCacheSourceDir}"
                into "${distPath}/bir-cache/${birCacheTargetDir}"
            }
            copy {
                from "build/target/extracted-distributions/${breLibSourcePath}"
                into "${distPath}/bre/lib"
                fileMode = 0644
            }
            copy {
                from "build/target/extracted-distributions/${apiDocsPath}"
                into "${distPath}/docs"
            }

            // pack to new cache
            copy {
                from "build/target/extracted-distributions/${birCacheSourceDir}"
                into "${birCache}/${birCacheTargetDir}"
            }
            copy {
                from "build/target/extracted-distributions/${baloCacheSourceDir}"
                into "${baloCache}/${baloCacheTargetDir}"
            }
            copy {
                from "build/target/extracted-distributions/${jarCacheSourceDir}"
                into "${jarCache}/${jarCacheTargetDir}"
            }
        }
        ignoreList.each { String elements ->
            bbeList.remove("$elements")
        }
        bbeList.each { String bbe ->
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                //TODO: Need to verify with windows
                exec {
                    workingDir "${buildDir}/TestProject"
                    commandLine 'cmd', '/c', "${distPath}/bin/ballerina.bat", 'build', '--experimental', "${bbe}"
                }
            } else {
                exec {
                    workingDir "${baseBuildPath}/TestProject"
                    commandLine 'sh', '-c', "../jballerina-tools-${ballerinaVersion}/bin/ballerina build --experimental ${bbe}"
                }
            }
        }
    }
}

/* Unpack Dependencies */
unpackJballerinaTools.dependsOn unpackBallerinaJre
unpackAwsLambdaBalo.dependsOn unpackJballerinaTools
unpackAwsLambdaExamples.dependsOn unpackAwsLambdaBalo
unpackDockerAnnotations.dependsOn unpackAwsLambdaExamples
unpackDockerExamples.dependsOn unpackDockerAnnotations
unpackKubernetesAnnotations.dependsOn unpackDockerExamples
unpackKubernetesExamples.dependsOn unpackKubernetesAnnotations
unpackStdLibs.dependsOn unpackKubernetesExamples
unpackBalCommand.dependsOn unpackStdLibs

/* Extract JRE */
extractJreForLinux.dependsOn unpackBalCommand
extractJreForMac.dependsOn extractJreForLinux
extractJreForWindows.dependsOn extractJreForMac

copyOtherRepos.dependsOn extractJreForWindows
combineDocs.dependsOn copyOtherRepos
/* Package Distributions */
packageDist.dependsOn combineDocs
packageDistZip.dependsOn packageDist
packageDistLinux.dependsOn packageDistZip
packageDistMac.dependsOn packageDistLinux
packageDistWindows.dependsOn packageDistMac
testExamples.dependsOn packageDistWindows

/* Delete Temporary Files */
deleteTemporaryFiles.dependsOn testExamples

build.dependsOn deleteTemporaryFiles
